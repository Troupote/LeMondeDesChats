//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/CameraControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControls"",
    ""maps"": [
        {
            ""name"": ""CameraControlMap"",
            ""id"": ""b904191c-8ad2-4352-a7e8-a6cb23df1d57"",
            ""actions"": [
                {
                    ""name"": ""Movements"",
                    ""type"": ""Value"",
                    ""id"": ""bb5e4469-ed7d-4115-99fd-fdb47f80c447"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseNearBorders"",
                    ""type"": ""Value"",
                    ""id"": ""fd685aa1-913e-4017-8bde-ebcdbc918b5c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""09e6f942-c35d-4381-af1a-7f19c9346f2f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""72d8a0d9-c118-479a-9c64-4d8eb20d745f"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""d1b205a7-c3fc-452a-a80a-de20dc7de862"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""5921b598-4d6d-473e-836a-db4eee641c78"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""92f68ec5-8dca-4fca-9bab-306dc134d800"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""9f134e46-18e8-4e03-8110-7b92a34832cc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""efbe4597-509e-4f8a-8c14-d11962d6d174"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""0c435a8b-12f0-4f39-8dc1-fde82121e0e9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3032baae-a0aa-42c5-a9b7-db2609081510"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseNearBorders"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CameraControlMap
        m_CameraControlMap = asset.FindActionMap("CameraControlMap", throwIfNotFound: true);
        m_CameraControlMap_Movements = m_CameraControlMap.FindAction("Movements", throwIfNotFound: true);
        m_CameraControlMap_MouseNearBorders = m_CameraControlMap.FindAction("MouseNearBorders", throwIfNotFound: true);
        m_CameraControlMap_Rotation = m_CameraControlMap.FindAction("Rotation", throwIfNotFound: true);
    }

    ~@CameraControls()
    {
        UnityEngine.Debug.Assert(!m_CameraControlMap.enabled, "This will cause a leak and performance issues, CameraControls.CameraControlMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraControlMap
    private readonly InputActionMap m_CameraControlMap;
    private List<ICameraControlMapActions> m_CameraControlMapActionsCallbackInterfaces = new List<ICameraControlMapActions>();
    private readonly InputAction m_CameraControlMap_Movements;
    private readonly InputAction m_CameraControlMap_MouseNearBorders;
    private readonly InputAction m_CameraControlMap_Rotation;
    public struct CameraControlMapActions
    {
        private @CameraControls m_Wrapper;
        public CameraControlMapActions(@CameraControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movements => m_Wrapper.m_CameraControlMap_Movements;
        public InputAction @MouseNearBorders => m_Wrapper.m_CameraControlMap_MouseNearBorders;
        public InputAction @Rotation => m_Wrapper.m_CameraControlMap_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_CameraControlMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlMapActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControlMapActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControlMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControlMapActionsCallbackInterfaces.Add(instance);
            @Movements.started += instance.OnMovements;
            @Movements.performed += instance.OnMovements;
            @Movements.canceled += instance.OnMovements;
            @MouseNearBorders.started += instance.OnMouseNearBorders;
            @MouseNearBorders.performed += instance.OnMouseNearBorders;
            @MouseNearBorders.canceled += instance.OnMouseNearBorders;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        private void UnregisterCallbacks(ICameraControlMapActions instance)
        {
            @Movements.started -= instance.OnMovements;
            @Movements.performed -= instance.OnMovements;
            @Movements.canceled -= instance.OnMovements;
            @MouseNearBorders.started -= instance.OnMouseNearBorders;
            @MouseNearBorders.performed -= instance.OnMouseNearBorders;
            @MouseNearBorders.canceled -= instance.OnMouseNearBorders;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        public void RemoveCallbacks(ICameraControlMapActions instance)
        {
            if (m_Wrapper.m_CameraControlMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControlMapActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControlMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControlMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControlMapActions @CameraControlMap => new CameraControlMapActions(this);
    public interface ICameraControlMapActions
    {
        void OnMovements(InputAction.CallbackContext context);
        void OnMouseNearBorders(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
